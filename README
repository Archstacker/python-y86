Python Y86 Utility
(c) 2012 Linus Yang <laokongzi@gmail.com>

****************
* Introduction *
****************
The Python Y86 utility includes an assembler 'yas' and a pipelined simulator 'pipe' for Y86, a simplified x86-like ISA described in CMU's CSAPP.

'yas.py' and 'pipe.py', the two single scripts are the main programs written in Python. They are extremely portable and could be run on any platform supporting Python. 

Both scripts are run in command-line terminal. Type with '-h' to show help and available options.  You could find the latest version on my personal github site: https://github.com/linusyang/python-y86.

*****************
* Y86 Assembler *
*****************
The Python Y86 assember 'py-yas' behaves like the CSAPP official 'yas' assembler. But It is more powerful and able to generate two kinds of Y86 object file, ASCII object and binary object in the same folder of '.ys' assembly source.

The ASCII object '.yo' file is fully compatible with the CSAPP official 'yis' or 'psim' simulator and very friendly to read. The binary object '.ybo' file is generated for the pipelined simulator to execute.

Features:
- Support all instructions of Y86 ISA including 'iaddl', 'leave' and 'cmovXX'
- Support labeling, positioning by '.pos' and code alignment by '.align'
- Large memory address support which can generate large size object files
- Flexible options to specify:
  * Object generation using big-endian or little-endian 
  * Using rules in CSAPP 1st editon or 2nd edtion
  and more...

[Y86 Assembler - 0.1.1 - Linus Yang]
Usage: yas.py [options] [assembly file]

Options:
  -h, --help       show this help message and exit
  -l, --largemem   support code generation for more than 4096 bytes. (default
                   is enabled)
  -b, --bigendian  code generation using big-endian. (default is little-
                   endian)
  -s, --second     using generation rules in csapp 2nd edition. (default using
                   1st editon rules)
  -a, --asciibin   enable conversion binary object to ASCII digits. (default
                   is disabled)

***************************
* Pipelined Y86 Simulator *
***************************
The Python pipelined Y86 simulator 'py-pipe' also behaves like the official 'psim' simulator. But it uses binary object '.ybo' generated by 'py-yas' as input. It also includes five stages: fetch, decode, execute, memory and writeback.

After execution, the simulator will show brief running results on the screen and generate a log file with full information of each cycle running status. The log syntax is alike the official 2nd edtion 'psim' simulator output.

Features:
- Support all instructions of Y86 ISA including 'iaddl', 'leave' and 'cmovXX'
- Could deal with all 'hazard' conditions mentioned on CSAPP
- Logging with detailed running information of every cycle
- Flexible options to specify:
  * Object generation using big-endian or little-endian 
  * Using rules in CSAPP 1st editon or 2nd edtion
  * Setting max running cycles to avoid endless loop
  and more...

[Pipelined Y86 Simulator - 0.1.2 - Linus Yang]
Usage: pipe.py [options] [y86 binary object]

Options:
  -h, --help            show this help message and exit
  -b, --bigendian       detect binary as big-endian. (default is little-
                        endian)
  -s, --second          use decoding rules in csapp 2nd edition. (default
                        using 1st editon rules)
  -m MAXCYCLE, --maxcycle=MAXCYCLE
                        set limit of running cycles. 0 means no limit.
                        (default is 32767)
  -g, --guimode         set log output syntax for GUI. (default is disabled)
  -n, --nologfile       print log to stdout instead of writing to file.
                        (default is disabled)

***********
* License *
***********
This program is distributed under Creative Commons BY-NC-SA 3.0.

